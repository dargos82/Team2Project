
Generate Private and Public Keys
	Prompt to input p (positive integer between 1 and 50)
		int p

		if !(0 < p <= 50)

			print error
			return to prompt for correct input

		else if (p is not a prime number)

			print error
			return to prompt for correct input

		else continue

	Prompt to input q (positive integer between 1 and 50)
		int q

		if !(0 < q <= 50)

			print error
			return to prompt for correct input

		else if (q is not a prime number)

			print error
			return to prompt for correct input

		else continue

	Calculate modulus n

		int n = p * q

	Calculate totient theta

		int theta = (p-1) * (q-1)

	cpubexp //generate public key exponent

		Prompt to input e
		int e
		
		if (e < 0)

			Print error
			Prompt for new e

		if !(1 < e < theta)

			Print error
			Prompt for new e

		Calculate gcd for e and theta
		//unsure how to implement this
		if (gcd > 1)

			Print error
			Prompt for new e		

	cprivexp //generate private key exponent
		
		int d
		d = (1 + x * theta) / e //where does x come from?  Random number?

Encrypt a message

	encrypt //encrypt a message

		Prompt user for message

		//Loop through message one character at a time
		Get ascii value of character
			
			int m = ascii value of character

		int c = (m ^ e) % n  //for pow function, use loop to multiply m*m e times

		//modulo = (m ^ e) - (((m ^ e) / n) * n)
		
		get ascii value = c

		Open output file
		
		Print c to output file (add a space)

		Close output file

Decrypt a message

	decrypt //decrypt a message

		Open input file

		//Loop through message one character at a time
		Get ascii value of character
		
			int c = ascii value of character

		int m = (c ^ d) % n  //for pow function, use loop to multiply c*c d times

		//modulo = (c ^ d) - (((c ^ d) / n) * n)

		Open output file

		Print m to output file

		Close output file

		Close input file	
			
			

		
		

		

		
	



	
	


